页面4种文件类型
  html -> axml
  css -> acss
  js
  json  

app的3种文件类型
  app.js(必)  -> 全局脚本 全局变量
  app.acss -> 全局样式
  app.json(必) -> 项目配置

页面路径配置
  对象结构 
    app.json: {
      pages: [
        "page1",    // 一进来小程序的页面
        "page2",
        ...
        "pageN"
      ]
    }
  
app的生命周期函数
  onLaunch -> 项目初始化完成时触发，只触发一次
  onShow -> 页面展示的时候触发
  onHide -> 页面隐藏的时候触发
  onError -> 程序出现错误时触发

page的生命周期函数
  onLoad -> 页面加载时执行，每个页面只执行一次
  onReady -> 页面初次渲染完成，每个页面只执行一次
  onShow -> 页面显示后执行一次，可多次执行
  onHide -> 页面每次隐藏时执行一次
  onUnload -> 页面卸载时执行一次
  onTitleClick -> 标题被点击
  onPullDownRefresh -> 页面被下拉
  onReachBottom -> 页面被拉到底部
  onShareAppMessage -> 返回自定义分享信息

全局对象与全局样式
  getApp -> app对象
            外部脚本操作app中的对象、方法和常量
  app.acss -> 全局样式的配置

全局标题栏和导航栏配置
  app.json: {
    window: {
      defaultTitle: "标题",
      titleBarColor: "导航栏颜色"
    },
    tabs: {
      "textColor": "xxxx",
      "selectedColor": "xxxx",
      "backgroundColor": "xxxx",
      items: [
        {
          "pagePath": "xxx",
          "name": "xxx",
          "icon": "xxx",
          "activeIcon": "xxx"
        },
        xxxxxxxx
      ]
    }
  }
  #ffbfc7   标题栏淡粉色
  #f2f5f8   边框与背景色
  #ff6699   主题色选中色
  #868585   字体色未选中色
  #ffe817   视觉反差色

导航栏-配置属性名称
  textColor selectedColor backgroundColor items(pagePath、name、icon、activeIcon)

导航组件-<navigator></navigator>
  hover-class -> 点击时改变的样式
  hover-start-time -> 按住ms后出现点击状态
  hover-stay-time -> 手指释放ms后保留的状态
  url -> 跳转地址
  open-type -> 跳转类型
    navigate -> 保留当前页面，跳转新页面
    redirect -> 销毁当前页面，跳转新页面
    navigateBack -> 返回到上一个页面
    switchTab -> 跳转到tabBar页面

导航api
  my.navigateTo
  my.redirectTo
  my.navigateBack
  my.switchTab

支付宝小程序 数据绑定
  通过{{value}}表达式来动态的渲染页面内容
  js文件中需要以下形式定义page中的data对象
  data: {
    username: 'xxxx'
  }

条件渲染
  通过数据绑定传入true或false
  <view a:if={{value}}></view>
  <view a:elif={{value}}></view>
  <view a:else></view>

for循环列表渲染
  <view a:for={{list}} a:for-item='item' a:for-index='index'>
    {{index}}: {{item}}
  </view>

小程序事件类型
  tap与longTap 触摸
  touchStart与touchMove
  touchEnd与touchCancel

小程序事件对象与dataset
  <view data-name='1' data-age='2' onTap="tap">测试</view>
  tap: function(e) {
    console.log(e.target.data.name)
    console.log(e.target.data.age)
  }

rpx与px
  px: 固定像素
  rpx: 自适应（响应式）像素

图片组件
  <image src="" class="" style="" mode="" lazyLoad="" onError="" onLoaad="" />
  mode:
    图片的缩放模式
      scaleToFill  图片宽高完全拉伸或缩放到image标签进行填充
      aspectFit   保证长边显示，宽高按照纵横比缩放
      aspectFill  保证短边显示，宽高按照纵横比缩放
      widthFix    宽度不变，高度自动变化，保证原图比例
    图片裁剪模式
      top
      top-left
      top-right
      right
      bottom
      bottom-left
      bottom-right
      left

网络请求-api
  my.request({
    url: "",
    method: "",
    header: {},
    data: {},
    dataType: "json",
    success: function(res) {},
    fail: function(err) {},
    complete: function(err) {}
  })
  
            